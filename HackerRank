Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT CITY
FROM STATION
WHERE LOWER(SUBSTR(CITY,1,1)) in ('a','e','i','o','u');

Query the list of CITY names from STATION that end with vowels. Your result cannot contain duplicates.
MySQL Answer
SELECT DISTINCT CITY
FROM STATION
WHERE RIGHT(LOWER(CITY),1) in ('a','e','i','o','u');    

Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE RIGHT(LOWER(CITY),1) in ('a','e','i','o','u') AND 
LOWER(SUBSTR(CITY,1,1)) in ('a','e','i','o','u');  

Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u');

Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE RIGHT(LOWER(CITY),1) NOT IN ('a','e','i','o','u');    

Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE RIGHT(LOWER(CITY),1) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u');    

Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), 
secondary sort them by ascending ID.
SELECT Name
FROM STUDENTS
WHERE MARKS > 75
ORDER BY SUBSTR(NAME,-3,3), ID ASC

Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SELECT name
FROM Employee
Order by name ASC;

Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 
2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.
SELECT name
FROM Employee
WHERE months < 10 AND salary > 2000
ORDER BY employee_id;

Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. 
Truncate your answer to 4 decimal places.
SELECT ROUND(SUM(LAT_N),4)
FROM STATION
WHERE LAT_N > 38.7880 AND LAT_N < 137.2345;

Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. 
Truncate your answer to 4 decimal places.
SELECT ROUND(MAX(LAT_N),4)
FROM STATION
WHERE LAT_N < 137.2345;

Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. 
Round your answer to 4 decimal places.
SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N< 137.2345
ORDER BY LAT_N DESC
LIMIT 1;

You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!

The total score of a hacker is the sum of their maximum scores for all of the challenges. 
Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. 
If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. 
Exclude all hackers with a total score of 0 from your result.

SELECT hack.hacker_id, name, SUM(score1) as total_score
FROM Hackers hack JOIN
(SELECT hacker_id,  MAX(score) AS score1 FROM submissions GROUP BY challenge_id, hacker_id) max_score
ON hack.hacker_id = max_score.hacker_id
GROUP BY hack.hacker_id, name
HAVING total_score > 0
ORDER BY total_score DESC, hack.hacker_id;
