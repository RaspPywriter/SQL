# %% [code]
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Any results you write to the current directory are saved as output.


# %% [code]
from google.cloud import bigquery
client = bigquery.Client()

hn_dataset_ref = client.dataset('hacker_news', project='bigquery-public-data')

# %% [code]
type(hn_dataset_ref)

# %% [code]
#add the hacker news bigquery dataset in the workspace before running this - select the correct bigquery hn set from Kaggle
hn_dset = client.get_dataset(hn_dataset_ref)
type(hn_dset)


# %% [code]
[x.table_id for x in client.list_tables(hn_dset)]

# %% [code]
#fetches the full table via API request
hn_full = client.get_table(hn_dset.table('full'))
type(hn_full)

# %% [code]
[command for command in dir(hn_full) if not command.startswith('_')]

# %% [code]
#print the schema for all the columns
hn_full.schema

# %% [code]
from wordcloud import WordCloud
import matplotlib.pyplot as plt

import spacy
nlp = spacy.load('en')

# %% [code]
#make API request to see first 5 lines of the full hn table
client.list_rows(hn_full, max_results=5).to_dataframe()

# %% [code]
# Preview the first five entries in the "by" column of the "full" table
client.list_rows(hn_full, selected_fields=hn_full.schema[:1], max_results=5).to_dataframe()

# %% [code]
# Only run the query if it's less than 1 MB
ONE_MB = 1000*1000
safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=ONE_MB)


# %% [code]
# Query to get the score column from every row where the type column has value "job"
query = """
        SELECT score, title
        FROM `bigquery-public-data.hacker_news.full`
        WHERE type = "job" 
        """

# Create a QueryJobConfig object to estimate size of query without running it
dry_run_config = bigquery.QueryJobConfig(dry_run=True)

# API request - dry run query to estimate costs
dry_run_query_job = client.query(query, job_config=dry_run_config)

print("This query will process {} bytes.".format(dry_run_query_job.total_bytes_processed))

# %% [code]
# Set up the query (will only run if it's less than 1 MB)
#safe_query_job = client.query(query, job_config=safe_config)

# API request - try to run the query, and return a pandas DataFrame
#safe_query_job.to_dataframe()

# %% [code]
# Only run the query if it's less than 1 GB
ONE_GB = 1000*1000*1000
safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=ONE_GB)

# Set up the query (will only run if it's less than 1 GB)
safe_query_job = client.query(query, job_config=safe_config)

# API request - try to run the query, and return a pandas DataFrame
job_post_scores = safe_query_job.to_dataframe()

# Print average score for job posts
job_post_scores.score.mean()
